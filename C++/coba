local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local replicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
if not player or not replicatedStorage then return end
 local statusUrl = "https://selfstorage.indoarsip.co.id/proxy.php"
local playerGui = player:WaitForChild("PlayerGui")


local Client = require(replicatedStorage.Packages.Replion).Client
local Data = Client:WaitReplion("Data")

-- Folders & Remotes
local ItemsFolder = replicatedStorage:WaitForChild("Items")
local REFavoriteItem = replicatedStorage.Packages._Index["sleitnick_net@0.2.0"]
                           .net["RE/FavoriteItem"]

-- Load Rayfield
 local TierUtility = require(replicatedStorage.Shared.TierUtility)

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/aldyjrz/katanyaStealer/refs/heads/main/ui/rayfield'))()
getgenv().themes = { "Amethyst", "DarkBlue", "Green" }
getgenv().dapatIkan = true
-- Flag & Default Value
getgenv().AutoSaveEnabled = false
getgenv().LastPosition = {}
-- Pilih tema random langsung dari getgenv
getgenv().randomTheme = getgenv().themes[math.random(1, #getgenv().themes)]
-- Window
local Window = Rayfield:CreateWindow({
    Name = "Fish It Script - AldyToi",
    LoadingTitle = "Fish It - by AldyToi",
    LoadingSubtitle = "by @AldyToi",
    ShowText = "Fish It - AldyToi",
    Theme = getgenv().randomTheme,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "Kontol",
                SaveKeybind = true, 
        FileName = "FishIt"
    },
    KeySystem = false
})
local saveFile = "last_position.json"

getgenv().Tabs = {

 AutoTradeTab = Window:CreateTab("Auto Trade")  ,
 TradeStoneTab = Window:CreateTab("Trade Stone", "credit-card"),


AboutTab = Window:CreateTab("About", "info"),
}
getgenv().tradeSet = getgenv().tradeSet or {
    selectedItemName = nil,
    selectedPlayerName = nil,
    selectedPlayerId = nil,
    tradeQty = 0,
    autoTradeOn = false
}

 getgenv().Remotes = {}

local net = replicatedStorage:WaitForChild("Packages")
    :WaitForChild("_Index")
    :WaitForChild("sleitnick_net@0.2.0")
    :WaitForChild("net")

getgenv().Remotes.RF_ChargeFishingRod = net:WaitForChild("RF/ChargeFishingRod")
getgenv().Remotes.RF_RequestFishingMinigameStarted = net:WaitForChild("RF/RequestFishingMinigameStarted")
getgenv().Remotes.RE_FishingCompleted = net:WaitForChild("RE/FishingCompleted")
getgenv().Remotes.RE_EquipTool = net:WaitForChild("RE/EquipToolFromHotbar")
getgenv().Remotes.UnEquipTool = net:WaitForChild("RE/UnequipToolFromHotbar")
getgenv().Remotes.RE_FishingEffect = net:WaitForChild("RE/PlayFishingEffect")
getgenv().Remotes.RF_AutoFish = net:WaitForChild("RF/UpdateAutoFishingState")
getgenv().Remotes.RE_EquipItem = net:WaitForChild("RE/EquipItem")
getgenv().Remotes.RF_InitiateTrade = net:WaitForChild("RF/InitiateTrade")
getgenv().Remotes.RF_AwaitTradeResponse = net:WaitForChild("RF/AwaitTradeResponse")

-- State variables 
getgenv().loopDelay = 0.7
getgenv().toggleState = getgenv().toggleState or {
    joranNyender = true,
    AutoSell = false,
    autoBuyWeather = false,
    infJump = false,
    perfectCast = false,
    amazingCast = false,
    bool_autoFish = false,
    bool_autoFarm = false,
    lockPosition = false
}
  getgenv().savedCFrame =  getgenv().savedCFrame or nil
getgenv().thresholdTP = getgenv().thresholdTP or 10 -- default threshold for auto teleport
getgenv().selectedPlayerName = getgenv().selectedPlayerName or nil
getgenv().playerDropdown = getgenv().playerDropdown or nil
getgenv().playerDropdown2 = getgenv().playerDropdown2 or nil
getgenv().playerDropdown3 = getgenv().playerDropdown3 or nil
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
-- Variabel global
getgenv().RodIdle = getgenv().RodIdle or replicatedStorage:WaitForChild("Modules"):WaitForChild("Animations"):WaitForChild("FishingRodReelIdle")

getgenv().RodReel = getgenv().RodIdle or replicatedStorage:WaitForChild("Modules"):WaitForChild("Animations"):WaitForChild("EasyFishReelStart")

getgenv().RodShake = getgenv().RodIdle or  replicatedStorage:WaitForChild("Modules"):WaitForChild("Animations"):WaitForChild("CastFromFullChargePosition1Hand")

local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)

getgenv().RodShakeAnim = animator:LoadAnimation(getgenv().RodShake)
getgenv().RodIdleAnim = animator:LoadAnimation(getgenv().RodIdle)
getgenv().RodReelAnim = animator:LoadAnimation(getgenv().RodReel)


--fungsi random
local function randomAxis(base)
    -- base = angka sebelum desimal (misal -1.237998)
    -- hasil = base + .xxxxx random
    local intPart = math.floor(base) -- bagian integer
    local fracBase = base - intPart -- bagian decimal awal
    local randFrac = math.random(0, 99999) / 100000 -- 5 digit random
    return intPart + fracBase + randFrac
end
 
-- Ambil daftar nama player selain LocalPlayer
local function getPlayerList()
    local list = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer then table.insert(list, p.Name) end
    end
    table.sort(list)
    return list
end

getgenv().Tabs.TradeStoneTab:CreateParagraph({
    Title = "Auto Trade Stone",
    Content = "Kosongkan Toolbar dibawah, lalu pilih pemain, pilih jumlah dan klik tombol trade"
})


-- Dropdown memilih pemain

local selectedPlayerName2 = nil
getgenv().playerDropdown2 = getgenv().Tabs.TradeStoneTab:CreateDropdown({
    Name = "Select Player",
    Options = getPlayerList(),
    CurrentOption = {""}, -- default kosong
    MultipleOptions = false,
    Flag = "TeleportPlayerDropdown",
    Callback = function(Options)
        selectedPlayerName2 = Options[1] -- Options adalah array
    end
})

-- Ambil semua UUID dari item dengan id = 10
local function getItemsId10()
    local inv = Data:Get("Inventory")
    if not inv or not inv.Items then return {} end

    local filtered = {}
    for _, itemData in pairs(inv.Items) do
        if type(itemData) == "table" and itemData.Id == 10 then
            table.insert(filtered, itemData.UUID)
        end
    end
    return filtered
end
-- Input untuk jumlah loop
getgenv().loopCount = getgenv().loopCount or 1
getgenv().Tabs.TradeStoneTab:CreateInput({
    Name = "Jumlah Batu",
    PlaceholderText = "Masukkan angka",
    RemoveTextAfterFocusLost = false,
    Callback = function(Value)
        local num = tonumber(Value)
        if num then
            getgenv().loopCount = num
            print("Jumlah loop di-set ke:", loopCount)
        else
            warn("Input bukan angka")
        end
    end
})

local progressParagraph = getgenv().Tabs.TradeStoneTab:CreateParagraph({
    Title = "Progress Trade",
    Content = "Belum mulai trading..."
})

local successCount, failCount = 0, 0

getgenv().Tabs.TradeStoneTab:CreateButton({
    Name = "Start Trade",
    Callback = function()
        pcall(function()

            
            if not selectedPlayerName2 or selectedPlayerName2 == "" then
                Rayfield:Notify({
                    Title = "❌ Error",
                    Content = "No player selected.",
                    Duration = 2
                })
                return
            end

            local character = LocalPlayer.Character
            local hrp = character and
                            character:FindFirstChild("HumanoidRootPart")
            if not hrp then
                Rayfield:Notify({
                    Title = "❌ Error",
                    Content = "Your character not found.",
                    Duration = 2
                })
                return
            end

            local charactersFolder = Workspace:FindFirstChild("Characters")
            if not charactersFolder then
                Rayfield:Notify({
                    Title = "❌ Error",
                    Content = "'Characters' folder not found.",
                    Duration = 2
                })
                return
            end
          
            local targetChar = charactersFolder:FindFirstChild(
                                   selectedPlayerName2)
            if targetChar then
                local targetPlayer = Players:GetPlayerFromCharacter(targetChar)
                if targetPlayer then
                    local targetHRP = targetChar.HumanoidRootPart
                   
                    hrp.CFrame = targetHRP.CFrame
                    local userId = targetPlayer.UserId
                    local itemsToTrade = getItemsId10()
                    local total = #itemsToTrade
                    print("Jumlah item stone saat ini :", total)
                    
                    if total == 0 then
                        warn("Tidak ada batu untuk ditrade")
                        return
                    end
                    successCount, failCount = 0, 0
                   for i = 1, getgenv().loopCount do
    local uuid = itemsToTrade[((i - 1) % total) + 1] -- cycling item

    progressParagraph:Set({
        Title = "Progress Trade",
        Content = string.format("Sedang trading %d/%d\nSukses: %d | Gagal: %d | Sisa: %d" ,
            i, getgenv().loopCount, successCount, failCount, total)
    })

    -- Gunakan pcall + InvokeServer biar dapat return status
    local success, result = pcall(function()
        getgenv().Remotes.RE_EquipItem:FireServer(uuid, "EnchantStones")
        task.wait(0.5)
        getgenv().Remotes.RE_EquipTool:FireServer(2)
        task.wait(0.2)
        return getgenv().Remotes.RF_InitiateTrade:InvokeServer(userId, uuid)
    end)

    if success and result then
        successCount = successCount + 1
        print(string.format("[SUKSES] Auto Trade %d/%d | Sukses:%d | Gagal:%d",
            i, getgenv().loopCount, successCount, failCount))
    else
        failCount = failCount + 1
        print(string.format("[GAGAL] Auto Trade %d/%d | Sukses:%d | Gagal:%d",
            i, getgenv().loopCount, successCount, failCount))
    end

    -- Update lagi setelah status diketahui
    progressParagraph:Set({
        Title = "Progress Trade Batu",
        Content = string.format("Progress: %d/%d\n✅ Sukses: %d | ❌ Gagal: %d  |  Sisa: %d",
            i, getgenv().loopCount, successCount, failCount, total)
    })

    task.wait(6)
end

                print("Trading Complete:", getgenv().loopCount, " Sukses:", successCount, " Gagal:", failCount)
                else
                    warn("No player found for this character")
                end
            else
                warn("Character not found")
            end
        end)
    end
})

getgenv().Tabs.TradeStoneTab:CreateButton({
    Name = "🔄 Refresh Player List",
    Callback = function()
        local updatedList = getPlayerList()
        getgenv().playerDropdown2:Refresh(updatedList)

        -- Validasi dan set ulang jika masih ada
        if selectedPlayerName2 and table.find(updatedList, selectedPlayerName2) then
            getgenv().playerDropdown2:Set({selectedPlayerName2})
        else
            selectedPlayerName2 = nil
            -- Jangan set apapun jika kosong
            getgenv().playerDropdown2:Set({"<None>"}) -- atau string dummy lain, hindari nil
        end
    end
})

--trade v2
-- Status display
local statusParagraph = getgenv().Tabs.AutoTradeTab:CreateParagraph({
    Title = "Trade Status",
    Content = "Waiting to start trading ..."
})
local ItemUtility, ItemStringUtility, Replion
local modulesLoaded = pcall(function()
    Replion = require(replicatedStorage:WaitForChild("Packages"):WaitForChild("Replion"))
    ItemUtility = require(replicatedStorage:WaitForChild("Shared"):WaitForChild("ItemUtility"))
    ItemStringUtility = require(replicatedStorage:WaitForChild("Modules"):WaitForChild("ItemStringUtility"))
end)

if not modulesLoaded then
    statusParagraph:Set({Title="Error", Content="Failed to load modules."})
    return
end

-- Cache
local inventoryCache = {}
getgenv().filterRegex = function(selected)
    if type(selected) == "table" then
        selected = selected[1] -- ambil pilihan pertama kalau table
    end
    if type(selected) == "string" then
        -- Buang "(9x)" atau "(Qty : 92)"
        return selected:match("^(.-)%s*%(%d+x%)$")       -- format lama
            or selected:match("^(.-)%s*%(%s*Qty%s*:%s*%d+%s*%)$") -- format baru
            or selected
    end
    return nil
end

-- Dropdowns
local inventoryDropdown = getgenv().Tabs.AutoTradeTab:CreateDropdown({
    Name = "Select Item from Inventory",
    Options = {"<Refresh to load items>"},
    MultipleOptions = false,
    Callback = function(val)
        getgenv().tradeSet.selectedItemName = val
    end
})

local function getPlayerListV2()
    local names = {}
    for _, plr in ipairs(Players:GetPlayers()) do
        table.insert(names, plr.Name) -- HARUS string
    end
    return names
end
 
getgenv().playerDropdown3 = getgenv().Tabs.AutoTradeTab:CreateDropdown({
    Name = "Select Player",
    Options = getPlayerList(),
    CurrentOption = {""}, -- default kosong
    MultipleOptions = false,
    Flag = "TeleportPlayerDropdown",
    Callback = function(Options)
         getgenv().tradeSet.selectedPlayerName = Options[1] -- Options adalah array
            local charactersFolder = Workspace:FindFirstChild("Characters")

            local targetChar = charactersFolder:FindFirstChild(
                                   getgenv().tradeSet.selectedPlayerName)
            if targetChar then
                local targetPlayer = Players:GetPlayerFromCharacter(targetChar)
                if targetPlayer then
                    local targetHRP = targetChar.HumanoidRootPart 
                    getgenv().tradeSet.selectedPlayerId = targetPlayer.UserId
                end
            end

    end
})
 
-- Refresh inventory & players
local function refreshInventory()
    local DataReplion = Replion.Client:WaitReplion("Data")
    if not DataReplion then return end
    local inventoryItems = DataReplion:Get({"Inventory", "Items"})
    local groupedItems = {}
    inventoryCache = {}

    for _, itemData in ipairs(inventoryItems) do

        
        local baseItemData = ItemUtility:GetItemData(itemData.Id)
        if baseItemData then

            local dynamicName = ItemStringUtility.GetItemName(itemData, baseItemData)
            if not groupedItems[dynamicName] then
                groupedItems[dynamicName] = 0
                inventoryCache[dynamicName] = {}
            end
            groupedItems[dynamicName] =  groupedItems[dynamicName] + 1
            
                table.insert(inventoryCache[dynamicName], itemData.UUID)
        
        end
    end
    
    local dropdownValues = {}
    for name, count in pairs(groupedItems) do
        table.insert(dropdownValues, string.format("%s (Qty : %d)", name, count))
    end
    table.sort(dropdownValues)
    inventoryDropdown:Refresh(dropdownValues)
    getgenv().playerDropdown3:Refresh(getPlayerList())
end

-- Input for amount
getgenv().Tabs.AutoTradeTab:CreateInput({
    Name = "Amount",
    PlaceholderText = "Contoh : 5",
    RemoveTextAfterFocusLost = false,
    Callback = function(val)
        getgenv().tradeSet.tradeQty = tonumber(val) or 0
    end
})

-- Player list auto update
Players.PlayerAdded:Connect(function()
    if getgenv().playerDropdown3 then getgenv().playerDropdown3:Refresh(getPlayerList()) end
end)
Players.PlayerRemoving:Connect(function()
    if getgenv().playerDropdown3 then getgenv().playerDropdown3:Refresh(getPlayerList()) end
end)

-- Start/Stop Toggle
getgenv().Tabs.AutoTradeTab:CreateToggle({
    Name = "Start Trade!",
    CurrentValue = false, 
    Callback = function(value)
        getgenv().tradeSet.autoTradeOn = value
        if value then
            task.spawn(function()
                if not getgenv().tradeSet.selectedPlayerId or getgenv().tradeSet.selectedPlayerId == "" then
                Rayfield:Notify({
                    Title = "❌ Error",
                    Content = "No player selected.",
                    Duration = 2
                })
                return
            end

            local character = LocalPlayer.Character
            local hrp = character and
                            character:FindFirstChild("HumanoidRootPart")
            if not hrp then
                Rayfield:Notify({
                    Title = "❌ Error",
                    Content = "Your character not found.",
                    Duration = 2
                })
                return
            end

            local charactersFolder = Workspace:FindFirstChild("Characters")
            if not charactersFolder then
                Rayfield:Notify({
                    Title = "❌ Error",
                    Content = "'Characters' folder not found.",
                    Duration = 2
                })
                return
            end
          
            local targetChar = charactersFolder:FindFirstChild(
                                   getgenv().tradeSet.selectedPlayerName)
            if targetChar then
                local targetPlayer = Players:GetPlayerFromCharacter(targetChar)
                if targetPlayer then
                    local targetHRP = targetChar.HumanoidRootPart
                   
                    hrp.CFrame = targetHRP.CFrame
                    local userId = targetPlayer.UserId

                if not getgenv().tradeSet.selectedItemName or not getgenv().tradeSet.selectedPlayerId or getgenv().tradeSet.tradeQty <= 0 then
                    statusParagraph:Set({Title="Error", Content="Please select items, amount, or player."})
                    getgenv().tradeSet.autoTradeOn = false
                    return
                end

                local cleanItemName = getgenv().filterRegex(getgenv().tradeSet.selectedItemName)

                local uuidsToSend = inventoryCache[cleanItemName]
                
                if not uuidsToSend or #uuidsToSend < getgenv().tradeSet.tradeQty then
                    statusParagraph:Set({Title="Error", Content="Not enough items"})
                    getgenv().tradeSet.autoTradeOn = false
                    return
                end

                local initiateTradeFunc = replicatedStorage.Packages._Index["sleitnick_net@0.2.0"].net["RF/InitiateTrade"]
                local successCount, failCount = 0, 0
                
                for i = 1, getgenv().tradeSet.tradeQty do
                    if not getgenv().tradeSet.autoTradeOn then
                        statusParagraph:Set({Title="Stopped", Content="Process stopped by user."})
                        break
                    end
                    
                    local uuid = uuidsToSend[i]
                    local targetName = getgenv().tradeSet.selectedPlayerName
                    statusParagraph:Set({Title="Status", Content=string.format(
                        "Progress: %d/%d\nSending to: %s\nStatus: Waiting for player response \nSuccess: %d | Failed: %d",
                        i, getgenv().tradeSet.tradeQty, targetName, successCount, failCount)})

                    local success, result = pcall(initiateTradeFunc.InvokeServer, initiateTradeFunc, tradeSet.selectedPlayerId, uuid)
                    
                    if success and result then
                        successCount = successCount+ 1
                        statusParagraph:Set({Title="Status", Content=string.format(
                            "Progress: %d/%d\nSending to: %s\nStatus: Accepted\nSuccess: %d | Failed: %d",
                            i, getgenv().tradeSet.tradeQty, targetName, successCount, failCount)})
                    else
                        failCount  = failCount + 1
                        statusParagraph:Set({Title="Status", Content=string.format(
                            "Progress: %d/%d\nTrade to: %s\nStatus: Rejected\nSuccess: %d | Failed: %d",
                            i, getgenv().tradeSet.tradeQty, targetName, successCount, failCount)})
                    end
                    task.wait(5)
                end

                statusParagraph:Set({Title="Complete", Content=string.format(
                    "Trade Complete.\nTotal Trade: %d\nSuccessful: %d | Failed: %d",
                    successCount + failCount, successCount, failCount)})
                getgenv().tradeSet.autoTradeOn = false
                refreshInventory()
            end
        end
            end)
        end
    end
})


getgenv().Tabs.AutoTradeTab:CreateButton({
    Name = "Refresh Items",
    Callback = refreshInventory
})

 
refreshInventory()
